{"version":3,"file":"bundle.js","mappings":"mBACO,SAASA,EAASC,EAAQC,EAAYC,GAC3C,MAAMC,EAAiBD,EAAWE,MAYlC,MAV+C,CAC7CC,cAAc,EAEd,GAAAC,GAGE,OAFgBH,EAAeI,KAAKC,KAGtC,EAIJ,CCdA,IAAYC,GAAZ,SAAYA,GACV,uBACA,0BACD,CAHD,CAAYA,IAAAA,EAAa,KAKlB,MAAMC,EACX,WAAAC,CACSC,EACAC,EACAC,EACAC,EACAC,GAJA,KAAAJ,GAAAA,EACA,KAAAC,MAAAA,EACA,KAAAC,YAAAA,EACA,KAAAC,OAAAA,EACA,KAAAC,OAAAA,CACN,ECRL,MAAMC,EAAN,cACY,KAAAC,UAA2B,EAKvC,CAHE,WAAAC,CAAYC,GACVZ,KAAKU,UAAUG,KAAKD,EACtB,EAGK,MAAME,UAAqBL,EAKhC,cACEM,QALM,KAAAC,SAAsB,EAM9B,CAEA,kBAAOC,GACL,OAAIjB,KAAKkB,WAETlB,KAAKkB,SAAW,IAAIJ,GAFMd,KAAKkB,QAKjC,CAEA,UAAAC,CAAWd,EAAeC,EAAqBC,GAC7C,MAAMa,EAAa,IAAIlB,EACrBmB,KAAKC,SAASC,WACdlB,EACAC,EACAC,EACAN,EAAcuB,QAGhBxB,KAAKgB,SAASH,KAAKO,GAEnBpB,KAAKyB,iBACP,CAEA,WAAAC,CAAYC,EAAwBC,GAClC,MAAMC,EAAU7B,KAAKgB,SAASc,MAAMC,GAASA,EAAK3B,KAAOuB,IAErDE,GAAWA,EAAQrB,SAAWoB,IAChCC,EAAQrB,OAASoB,EACjB5B,KAAKyB,kBAET,CAEQ,eAAAA,GACN,IAAK,MAAMb,KAAcZ,KAAKU,UAC5BE,EAAWZ,KAAKgB,SAASgB,QAE7B,EAGK,MAAMC,EAAenB,EAAaG,cClDlC,SAASiB,EAASC,GACvB,IAAIC,GAAU,EAuBd,OArBID,EAAcE,WAChBD,EAAUA,GAA4D,IAAjDD,EAAcvC,MAAM2B,WAAWe,OAAOC,QAGhC,MAA3BJ,EAAcK,WACiB,iBAAxBL,EAAcvC,QAErBwC,EAAUA,GAAWD,EAAcvC,MAAM2C,OAASJ,EAAcK,WAGrC,MAA3BL,EAAcM,WACiB,iBAAxBN,EAAcvC,QAErBwC,EAAUA,GAAWD,EAAcvC,MAAM2C,OAASJ,EAAcM,WAEzC,MAArBN,EAAcO,KAA8C,iBAAxBP,EAAcvC,QACpDwC,EAAUA,GAAWD,EAAcvC,MAAQuC,EAAcO,KAElC,MAArBP,EAAcQ,KAA8C,iBAAxBR,EAAcvC,QACpDwC,EAAUA,GAAWD,EAAcvC,MAAQuC,EAAcQ,KAEpDP,CACT,CClCe,MAAeQ,EAQ5B,WAAAzC,CACE0C,EACAC,EACAC,EACAC,GAEAhD,KAAKiD,WAAaC,SAASC,eACzBN,GAGF7C,KAAKoD,OAASF,SAASC,eAAeL,GAEtC,MAAMO,EAAeH,SAASI,WAAWtD,KAAKiD,WAAWM,SAAS,GAElEvD,KAAKwD,QAAUH,EAAaI,kBAExBT,IAAShD,KAAKwD,QAAQpD,GAAK4C,GAE/BhD,KAAK0D,OAAOX,EACd,CAEQ,MAAAW,CAAOX,GACb/C,KAAKoD,OAAOO,sBACVZ,EAAgB,aAAe,YAC/B/C,KAAKwD,QAET,ECvBK,MAAMI,UAAqBhB,EAKhC,WAAAzC,GACEY,MAAM,gBAAiB,OAAO,EAAM,cAEpCf,KAAK6D,YAEL7D,KAAK8D,aAAe9D,KAAKwD,QAAQO,cAC/B,UAGF/D,KAAKgE,mBAAqBhE,KAAKwD,QAAQO,cACrC,gBAGF/D,KAAKiE,cAAgBjE,KAAKwD,QAAQO,cAChC,UAEJ,CAEA,SAAAF,GACE7D,KAAKwD,QAAQU,iBAAiB,SAAUlE,KAAKmE,cAC/C,CAEA,aAAAC,GAAuB,CAEf,YAAAC,GACN,MAAMC,EAAetE,KAAK8D,aAAalE,MACjC2E,EAAqBvE,KAAKgE,mBAAmBpE,MAC7C4E,EAAgBxE,KAAKiE,cAAcrE,MAOnC6E,EAA0C,CAC9C7E,MAAO0E,EACPjC,UAAU,EACVG,UAAW,GAGPkC,EAA4C,CAChD9E,OAAQ0E,EACRjC,UAAU,EACVK,IAAK,EACLC,IAAK,GAGP,GACG,EAnB8C,CAC/C/C,MAAO0E,EACPjC,UAAU,KAkBT,EAAoBoC,IACpB,EAAoBC,GAMvB,MAAO,CAACJ,EAAcC,GAAqBC,GAJzCG,MAAM,mCAKV,CAEQ,WAAAC,GACN5E,KAAK8D,aAAalE,MAAQ,GAC1BI,KAAKgE,mBAAmBpE,MAAQ,GAChCI,KAAKiE,cAAcrE,MAAQ,EAC7B,CAGQ,aAAAuE,CAAcU,GACpBA,EAAEC,iBACF,MAAMC,EAAY/E,KAAKqE,eAEvB,GAAIW,MAAMC,QAAQF,GAAY,CAC5B,MAAO1E,EAAO6E,EAAM3E,GAAUwE,EAC9B9C,EAAad,WAAWd,EAAO6E,EAAM3E,GACrCP,KAAK4E,aACP,CACF,G,0TATQ,EADPrF,G,kCCpEI,MAAM4F,UACHvC,EAKR,WAAIwC,GACF,OAA4B,IAAxBpF,KAAK6B,QAAQtB,OAAqB,WAC1B,GAAGP,KAAK6B,QAAQtB,gBAC9B,CAEA,WAAAJ,CAAYkF,EAAgBxD,GAC1Bd,MAAM,iBAAkBsE,GAAQ,EAAOxD,EAAQzB,IAE/CJ,KAAK6B,QAAUA,EAEf7B,KAAK6D,YACL7D,KAAKoE,eACP,CAGA,gBAAAkB,CAAiBC,GACfA,EAAMC,aAAcC,QAAQ,aAAczF,KAAK6B,QAAQzB,IACvDmF,EAAMC,aAAcE,cAAgB,MACtC,CAEA,cAAAC,CAAenG,GAAqB,CAEpC,SAAAqE,GACE7D,KAAKwD,QAAQU,iBAAiB,YAAalE,KAAKsF,kBAChDtF,KAAKwD,QAAQU,iBAAiB,UAAWlE,KAAK2F,eAChD,CAEA,aAAAvB,GACEpE,KAAKwD,QAAQO,cAAc,MAAO6B,YAAc5F,KAAK6B,QAAQxB,MAE7DL,KAAKwD,QAAQO,cAAc,MAAO6B,YAAc,GAAG5F,KAAKoF,mBAExDpF,KAAKwD,QAAQO,cAAc,KAAM6B,YAAc5F,KAAK6B,QAAQvB,WAC9D,G,0TAlBA,EADCf,G,+WChBI,MAAMsG,UACHjD,EAKR,WAAAzC,CAAoB2F,GAClB/E,MAAM,eAAgB,OAAO,EAAO,GAAG+E,cADrB,KAAAA,KAAAA,EAGlB9F,KAAK+F,iBAAmB,GAExB/F,KAAK6D,YAEL7D,KAAKoE,eACP,CAGA,eAAA4B,CAAgBT,GACVA,EAAMC,cAAiD,eAAjCD,EAAMC,aAAcS,MAAM,KAClDV,EAAMT,iBACS9E,KAAKwD,QAAQO,cAAc,MACnCmC,UAAUC,IAAI,aAEzB,CAGA,WAAAC,CAAYb,GACV,MAAM5D,EAAiB4D,EAAMC,aAAca,QAAQ,cAEnDpE,EAAaP,YACXC,EACc,WAAd3B,KAAK8F,KAAoB7F,EAAcuB,OAASvB,EAAcqG,SAElE,CAGA,gBAAAC,CAAiB/G,GACAQ,KAAKwD,QAAQO,cAAc,MACnCmC,UAAUM,OAAO,YAC1B,CAEA,SAAA3C,GACE7D,KAAKwD,QAAQU,iBAAiB,WAAYlE,KAAKgG,iBAC/ChG,KAAKwD,QAAQU,iBAAiB,YAAalE,KAAKuG,kBAChDvG,KAAKwD,QAAQU,iBAAiB,OAAQlE,KAAKoG,aAE3CnE,EAAatB,aAAaK,IACxB,MAAMyF,EAAmBzF,EAAS0F,QAAQ3E,GACtB,WAAd/B,KAAK8F,KAA0B/D,EAAKvB,SAAWP,EAAcuB,OAE1DO,EAAKvB,SAAWP,EAAcqG,WAEvCtG,KAAK+F,iBAAmBU,EAExBzG,KAAK2G,gBAAgB,GAEzB,CAEA,aAAAvC,GACE,MAAMwC,EAAS,GAAG5G,KAAK8F,qBAEvB9F,KAAKwD,QAAQO,cAAc,MAAO3D,GAAKwG,EACvC5G,KAAKwD,QAAQO,cACX,MACC6B,YAAc,GAAG5F,KAAK8F,KAAKe,wBAChC,CAEQ,cAAAF,GACSzD,SAASC,eACtB,GAAGnD,KAAK8F,sBAGHgB,UAAY,GAEnB,IAAK,MAAMC,KAAe/G,KAAK+F,iBAC7B,IAAIZ,EAAYnF,KAAKwD,QAAQO,cAAc,MAAO3D,GAAI2G,EAE1D,EA5DA,GADCxH,G,oCAUD,GADCA,G,gCAWD,GADCA,G,qCC7CH,IAAIqE,EACJ,IAAIiC,EAAY,UAChB,IAAIA,EAAY,W","sources":["webpack://drag-n-drop/./src/decorators/autobind.ts","webpack://drag-n-drop/./src/models/project.ts","webpack://drag-n-drop/./src/state/project-state.ts","webpack://drag-n-drop/./src/utils/validation.ts","webpack://drag-n-drop/./src/components/base-component.ts","webpack://drag-n-drop/./src/components/project-input.ts","webpack://drag-n-drop/./src/components/project-item.ts","webpack://drag-n-drop/./src/components/project-list.ts","webpack://drag-n-drop/./src/app.ts"],"sourcesContent":["// Auto Bind\nexport function AutoBind(_: any, __: string, descriptor: PropertyDescriptor) {\n  const originalMethod = descriptor.value;\n\n  const adjustedDescriptor: PropertyDescriptor = {\n    configurable: true,\n\n    get() {\n      const boundFn = originalMethod.bind(this);\n\n      return boundFn;\n    },\n  };\n\n  return adjustedDescriptor;\n}\n","// Project Type\nexport enum ProjectStatus {\n  Active,\n  Finished,\n}\n\nexport class Project {\n  constructor(\n    public id: string,\n    public title: string,\n    public description: string,\n    public people: number,\n    public status: ProjectStatus\n  ) {}\n}\n","// Project State Management\nimport { Project, ProjectStatus } from \"../models/project\";\n\ntype Listener<T> = (items: T[]) => void;\n\nclass State<T> {\n  protected listeners: Listener<T>[] = [];\n\n  addListener(listenerFn: Listener<T>) {\n    this.listeners.push(listenerFn);\n  }\n}\n\nexport class ProjectState extends State<Project> {\n  private projects: Project[] = [];\n\n  private static instance: ProjectState;\n\n  private constructor() {\n    super();\n  }\n\n  static getInstance() {\n    if (this.instance) return this.instance;\n\n    this.instance = new ProjectState();\n\n    return this.instance;\n  }\n\n  addProject(title: string, description: string, people: number) {\n    const newProject = new Project(\n      Math.random().toString(),\n      title,\n      description,\n      people,\n      ProjectStatus.Active\n    );\n\n    this.projects.push(newProject);\n\n    this.updateListeners();\n  }\n\n  moveProject(movedProjectId: string, newStatus: ProjectStatus) {\n    const project = this.projects.find((proj) => proj.id === movedProjectId);\n\n    if (project && project.status !== newStatus) {\n      project.status = newStatus;\n      this.updateListeners();\n    }\n  }\n\n  private updateListeners() {\n    for (const listenerFn of this.listeners) {\n      listenerFn(this.projects.slice());\n    }\n  }\n}\n\nexport const projectState = ProjectState.getInstance();\n","// Validation\nexport interface Validatable {\n  value: string | number;\n  required?: boolean;\n  minLength?: number;\n  maxLength?: number;\n  min?: number;\n  max?: number;\n}\n\nexport function validate(validateInput: Validatable) {\n  let isValid = true;\n\n  if (validateInput.required)\n    isValid = isValid && validateInput.value.toString().trim().length !== 0;\n\n  if (\n    validateInput.minLength != null &&\n    typeof validateInput.value === \"string\"\n  )\n    isValid = isValid && validateInput.value.length > validateInput.minLength;\n\n  if (\n    validateInput.maxLength != null &&\n    typeof validateInput.value === \"string\"\n  )\n    isValid = isValid && validateInput.value.length < validateInput.maxLength;\n\n  if (validateInput.min != null && typeof validateInput.value === \"number\")\n    isValid = isValid && validateInput.value > validateInput.min;\n\n  if (validateInput.max != null && typeof validateInput.value === \"number\")\n    isValid = isValid && validateInput.value < validateInput.max;\n\n  return isValid;\n}\n","// Component Base Class\nexport default abstract class Component<\n  T extends HTMLElement,\n  U extends HTMLElement\n> {\n  templateEl: HTMLTemplateElement;\n  hostEl: T;\n  element: U;\n\n  constructor(\n    templateElId: string,\n    hostElId: string,\n    insertAtStart: boolean,\n    newElId?: string\n  ) {\n    this.templateEl = document.getElementById(\n      templateElId\n    )! as HTMLTemplateElement;\n\n    this.hostEl = document.getElementById(hostElId)! as T;\n\n    const importedNode = document.importNode(this.templateEl.content, true);\n\n    this.element = importedNode.firstElementChild as U;\n\n    if (newElId) this.element.id = newElId;\n\n    this.attach(insertAtStart);\n  }\n\n  private attach(insertAtStart: boolean) {\n    this.hostEl.insertAdjacentElement(\n      insertAtStart ? \"afterbegin\" : \"beforeend\",\n      this.element\n    );\n  }\n\n  abstract configure?(): void;\n  abstract renderContent(): void;\n}\n","/*\n/// <reference path=\"base-component.ts\"/>\n/// <reference path=\"../utils/validation.ts\"/>\n/// <reference path=\"../decorators/autobind.ts\"/>\n*/\n\nimport { AutoBind } from \"../decorators/autobind\";\nimport { projectState } from \"../state/project-state\";\nimport * as Validation from \"../utils/validation\";\nimport Component from \"./base-component\";\n\n// Project Input Class\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\n  titleInputEl: HTMLInputElement;\n  descriptionInputEl: HTMLInputElement;\n  peopleInputEl: HTMLInputElement;\n\n  constructor() {\n    super(\"project-input\", \"app\", true, \"user-input\");\n\n    this.configure();\n\n    this.titleInputEl = this.element.querySelector(\n      \"#title\"\n    )! as HTMLInputElement;\n\n    this.descriptionInputEl = this.element.querySelector(\n      \"#description\"\n    )! as HTMLInputElement;\n\n    this.peopleInputEl = this.element.querySelector(\n      \"#people\"\n    )! as HTMLInputElement;\n  }\n\n  configure() {\n    this.element.addEventListener(\"submit\", this.submitHandler);\n  }\n\n  renderContent(): void {}\n\n  private allUserInput(): [string, string, number] | void {\n    const enteredTitle = this.titleInputEl.value;\n    const enteredDescription = this.descriptionInputEl.value;\n    const enteredPeople = this.peopleInputEl.value;\n\n    const titleValidatable: Validation.Validatable = {\n      value: enteredTitle,\n      required: true,\n    };\n\n    const descValidatable: Validation.Validatable = {\n      value: enteredTitle,\n      required: true,\n      minLength: 5,\n    };\n\n    const peopleValidatable: Validation.Validatable = {\n      value: +enteredTitle,\n      required: true,\n      min: 1,\n      max: 5,\n    };\n\n    if (\n      !Validation.validate(titleValidatable) &&\n      !Validation.validate(descValidatable) &&\n      !Validation.validate(peopleValidatable)\n    ) {\n      alert(\"Invalid input, please try again!\");\n      return;\n    }\n\n    return [enteredTitle, enteredDescription, +enteredPeople];\n  }\n\n  private clearInputs() {\n    this.titleInputEl.value = \"\";\n    this.descriptionInputEl.value = \"\";\n    this.peopleInputEl.value = \"\";\n  }\n\n  @AutoBind\n  private submitHandler(e: Event) {\n    e.preventDefault();\n    const userInput = this.allUserInput();\n\n    if (Array.isArray(userInput)) {\n      const [title, desc, people] = userInput;\n      projectState.addProject(title, desc, people);\n      this.clearInputs();\n    }\n  }\n}\n","/* \n/// <reference path=\"base-component.ts\"/>\n/// <reference path=\"../state/project-state.ts\"/>\n/// <reference path=\"../decorators/autobind.ts\"/>\n/// <reference path=\"../models/drag-drop.ts\"/>\n/// <reference path=\"../models/project.ts\"/>\n*/\n\nimport { AutoBind } from \"../decorators/autobind\";\nimport { Draggable } from \"../models/drag-drop\";\nimport { Project } from \"../models/project\";\nimport Component from \"./base-component\";\n\n// Project Item Class\nexport class ProjectItem\n  extends Component<HTMLUListElement, HTMLLIElement>\n  implements Draggable\n{\n  private project: Project;\n\n  get persons() {\n    if (this.project.people === 1) return \"1 person\";\n    else return `${this.project.people} persons`;\n  }\n\n  constructor(hostId: string, project: Project) {\n    super(\"single-project\", hostId, false, project.id);\n\n    this.project = project;\n\n    this.configure();\n    this.renderContent();\n  }\n\n  @AutoBind\n  dragStartHandler(event: DragEvent) {\n    event.dataTransfer!.setData(\"text/plain\", this.project.id);\n    event.dataTransfer!.effectAllowed = \"move\";\n  }\n\n  dragEndHandler(_: DragEvent): void {}\n\n  configure() {\n    this.element.addEventListener(\"dragstart\", this.dragStartHandler);\n    this.element.addEventListener(\"dragend\", this.dragEndHandler);\n  }\n\n  renderContent() {\n    this.element.querySelector(\"h2\")!.textContent = this.project.title;\n\n    this.element.querySelector(\"h3\")!.textContent = `${this.persons} assigned`;\n\n    this.element.querySelector(\"p\")!.textContent = this.project.description;\n  }\n}\n","//  Project List class\n\n/*\n/// <reference path=\"base-component.ts\"/>\n/// <reference path=\"../decorators/autobind.ts\"/>\n/// <reference path=\"../models/drag-drop.ts\"/>\n/// <reference path=\"../state/project-state.ts\"/>\n/// <reference path=\"../state/project-state.ts\"/>\n/// <reference path=\"../models/project.ts\"/>\n*/\n\nimport { AutoBind } from \"../decorators/autobind\";\nimport { DragTarget } from \"../models/drag-drop\";\nimport { Project, ProjectStatus } from \"../models/project\";\nimport { projectState } from \"../state/project-state\";\nimport Component from \"./base-component\";\nimport { ProjectItem } from \"./project-item\";\n\nexport class ProjectList\n  extends Component<HTMLDivElement, HTMLElement>\n  implements DragTarget\n{\n  assignedProjects: Project[];\n\n  constructor(private type: \"active\" | \"finished\") {\n    super(\"project-list\", \"app\", false, `${type}-projects`);\n\n    this.assignedProjects = [];\n\n    this.configure();\n\n    this.renderContent();\n  }\n\n  @AutoBind\n  dragOverHandler(event: DragEvent) {\n    if (event.dataTransfer && event.dataTransfer!.types[0] === \"text/plain\") {\n      event.preventDefault();\n      const listEl = this.element.querySelector(\"ul\")!;\n      listEl.classList.add(\"droppable\");\n    }\n  }\n\n  @AutoBind\n  dropHandler(event: DragEvent) {\n    const movedProjectId = event.dataTransfer!.getData(\"text/plain\");\n\n    projectState.moveProject(\n      movedProjectId,\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\n    );\n  }\n\n  @AutoBind\n  dragLeaveHandler(_: DragEvent) {\n    const listEl = this.element.querySelector(\"ul\")!;\n    listEl.classList.remove(\"droppable\");\n  }\n\n  configure() {\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\n    this.element.addEventListener(\"drop\", this.dropHandler);\n\n    projectState.addListener((projects: Project[]) => {\n      const relevantProjects = projects.filter((proj) => {\n        if (this.type === \"active\") return proj.status === ProjectStatus.Active;\n\n        return proj.status === ProjectStatus.Finished;\n      });\n      this.assignedProjects = relevantProjects;\n\n      this.renderProjects();\n    });\n  }\n\n  renderContent() {\n    const listId = `${this.type}-projects-list`;\n\n    this.element.querySelector(\"ul\")!.id = listId;\n    this.element.querySelector(\n      \"h2\"\n    )!.textContent = `${this.type.toUpperCase()} PROJECTS`;\n  }\n\n  private renderProjects() {\n    const listEl = document.getElementById(\n      `${this.type}-projects-list`\n    )! as HTMLUListElement;\n\n    listEl.innerHTML = \"\";\n\n    for (const projectItem of this.assignedProjects) {\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, projectItem);\n    }\n  }\n}\n","/*\n/// <reference path=\"components/project-input.ts\" />\n/// <reference path=\"components/project-list.ts\" />\n*/\n\nimport { ProjectInput } from \"./components/project-input\";\nimport { ProjectList } from \"./components/project-list\";\n\nnew ProjectInput();\nnew ProjectList(\"active\");\nnew ProjectList(\"finished\");\n"],"names":["AutoBind","_","__","descriptor","originalMethod","value","configurable","get","bind","this","ProjectStatus","Project","constructor","id","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","getInstance","instance","addProject","newProject","Math","random","toString","Active","updateListeners","moveProject","movedProjectId","newStatus","project","find","proj","slice","projectState","validate","validateInput","isValid","required","trim","length","minLength","maxLength","min","max","Component","templateElId","hostElId","insertAtStart","newElId","templateEl","document","getElementById","hostEl","importedNode","importNode","content","element","firstElementChild","attach","insertAdjacentElement","ProjectInput","configure","titleInputEl","querySelector","descriptionInputEl","peopleInputEl","addEventListener","submitHandler","renderContent","allUserInput","enteredTitle","enteredDescription","enteredPeople","descValidatable","peopleValidatable","alert","clearInputs","e","preventDefault","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","event","dataTransfer","setData","effectAllowed","dragEndHandler","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","getData","Finished","dragLeaveHandler","remove","relevantProjects","filter","renderProjects","listId","toUpperCase","innerHTML","projectItem"],"sourceRoot":""}